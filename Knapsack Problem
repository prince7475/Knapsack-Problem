You are given an array of arrays. Each subarray in this array holds two integer values and represents an item; 

the first integer is the item's value, 
and the second integer is the item's weight.
You are also given an integer representing the maximum capacity of a knapsack that you have. 

Your goal is to fit items in your
knapsack, all the while maximizing their combined value. Note that the sum of the weights of the items 
that you pick cannot exceed the knapsack's capacity. Write a function that returns the maximized combined
value of the items that you should pick, as well as an array of the indices of each item picked. Assume 
that there will only be one combination of items that maximizes the total value in the knapsack.

Example input: [[1,2],[4,3],[5,6],[6,7]], 10
output : [10,[1,3]]
Time -> O(N) -> O(WH)
Space -> O(WH)
Main(Items, maxWeight)

Const matrix = row-> Items -> col -> 0 - maxWeight (inclusive) each -> [0,[]]

for(let i = 1; i <= matrix.length; i++){ // Items
  let currItem = Items[i - 1]
  let value = currItem[0]
  let currItemWeight = currItem[1]
  for(let weight = 1; weight <= maxWeight; weight++){
    let currResult = [value, [i - 1]]
    if(currItemWeight <= weight){
      let remainingWeight = weight - currItemWeight
      let remainingArr = matrix[i - 1][remainingWeight]
      currResult = [value + remainingArr[0], [i - 1, ...remainingArr[1]]]
      matrix[i][weight] = currResult
    }else {
      matrix[i][weight] = matrix[i - 1][weight]  
    }
    
  }
}

return matrix[items.length][maxWeight]


WRONG ANSWER -> I didn't check for the prev value, if the prev Value is greater then the curr item added, then i will take the prev arr
function knapsackProblem(items,capacity){
  let matrix = []
  
  for(let i = 0; i <= items.length; i++){
    let row = []
    for(let j = 0; j <= capacity; j++){
      let defaultValue = [0,[]]
      row.push(defaultValue)
    }
   matrix.push(row)
  }
  
  
  for(let i = 1; i <= matrix.length; i++){
      
      let currItem = items[i - 1]
      
      for(let weight = 1; weight <= capacity; weight++){
        
        if(currItem[1] <= weight){
          let currResult = [currItem[0],[i - 1]]
          let remainingWeight = weight - currItem[1]
          if(remainingWeight > 0){
          let remainingArr = matrix[i - 1][remaningWeight]
          currResult = [currItem[0] + remainingArr[0], [i - 1, ...remainingArr[1]]]
          }
          matrix[i][weight] = currResult
        }else {
          matrix[i][weight] = matrix[i - 1][weight]
        }
        
      }
  }

  return matrix[items.length][weight]
}



function knapsackProblem(items,capacity){
  let matrix = []
  for(let i = 0; i <=items.length; i++){
    let row = []
    for(let j = 0; j <= capacity; j++){
      row.push([0,[]])
    }
    matrix.push(row)
  }
  
  for(let i = 1; i <= items.length; i++){
    let currItem = items[i - 1]
    
    for(let weight = 1; weight <= capacity; weight++){
        if(currItem[1] <= weight) {
          let remainingWeight = weight - currItem[1]
          let remainingArr = matrix[i - 1][remainingWeight]
          let currResult = [currItem[0] + remainingArr[0], [...remainingArr[1], i - 1]]
          let prevArr = matrix[i - 1][weight]
          if(prevArr[0] >= currResult[0]){
            matrix[i][weight] = prevArr
          }else {
            matrix[i][weight]= currResult
          }
        
        }else {
          matrix[i][weight] = matrix[i - 1][weight]
        } 
    }
 
  }

return matrix[items.length][capacity]


}









